# SetTokenCreator is the contract where we should be populating this entity (or being populating)
type SetToken @entity {
  id: ID!
  address: Bytes!
  name: String!
  manager: Manager!
  issuances: [TokenIssuance!]! @derivedFrom(field: "setToken")
  totalSupply: [TotalSupply!]! @derivedFrom(field: "setToken")
  rebalances: [Rebalance!]! @derivedFrom(field: "setToken")
  redemptions: [TokenRedemption!]! @derivedFrom(field: "setToken")
  streamingFee: [StreamingFee!]! @derivedFrom(field: "setToken")
  components: [Component!]! # @derivedFrom(field: "setToken")
}

type TotalSupply @entity {
  id: ID!
  timestamp: BigInt!
  quantity: BigInt!
  setToken: SetToken!
}

type Manager @entity {
  id: ID!
  address: Bytes! #currently set to the settoken address....
  feeAccrualHistory: [Fee!]! @derivedFrom(field: "manager")
  totalFees: BigInt
  # setToken: SetToken! # might want to take out. creates infinite loop from setToken
}

type TokenIssuance @entity {
  id: ID!
  # buyerAddress is the Issuer
  buyerAddress: Bytes!
  setToken: SetToken!
  quantity: BigInt!
  transaction: Transaction!
  fee: Fee!
}

type Rebalance @entity {
  id: ID!
  setToken: SetToken!
  rebalanceDetails: RebalanceDetails!
  transaction: Transaction!
  transactionHash: Bytes!
}

type RebalanceDetails @entity {
  id: ID!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  chunkRebalanceNotional: BigInt! # uint256
  totalRebalanceNotional: BigInt! # uint256
}

type StreamingFee @entity {
  id: ID!
  timestamp: BigInt!
  setToken: SetToken!
  managerFee: BigInt # uint256
  protocolFee: BigInt # uint256
  newStreamingFee: BigInt # uint256
  newFeeRecipient: Bytes # address
}

type Transaction @entity {
  id: ID!
  from: Bytes
  to: Bytes
  timestamp: BigInt!
  gasLimit: BigInt
  gasPriceInGwei: BigInt
}

type FeeRecipientUpdated @entity {
  id: ID!
  setToken: Bytes! # address
  newFeeRecipient: Bytes! # address
}

type IssueFeeUpdated @entity {
  id: ID!
  setToken: Bytes! # address
  newIssueFee: BigInt! # uint256
}

type RedeemFeeUpdated @entity {
  id: ID!
  setToken: Bytes! # address
  newRedeemFee: BigInt! # uint256
}

type Fee @entity {
  id: ID!
  timestamp: BigInt!
  manager: Manager!
  managerPayout: BigInt
  protocolPayout: BigInt
  transaction: Transaction!
}

type Component @entity {
  id: ID!
  # setToken: SetToken!
  address: Bytes!
  positionValue: BigInt!
}

type Transfer @entity {
  id: ID!
  txnHash: Bytes!
  from: Bytes
  to: Bytes
  value: BigInt!
  setToken: SetToken!
  timestamp: BigInt!
}

type TokenRedemption @entity {
  id: ID!
  setToken: SetToken!
  redeemer: Bytes!
  # transaction: Transaction! // transaction is held is fee info.
  quantity: BigInt!
  fee: Fee!
}

type SetTokenRedeemed @entity {
  id: ID!
  setToken: Bytes! # address
  redeemer: Bytes! # address
  to: Bytes! # address
  transaction: Transaction!
  managerFee: BigInt! # uint256
  protocolFee: BigInt! # uint256
}

type RipcordCalled @entity {
  id: ID!
  timestamp: BigInt!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  rebalanceNotional: BigInt! # uint256
  etherIncentive: BigInt! # uint256
}



###########################################
###########################################
###########################################
type SimpleIndexTokenIssuance @entity {
  id: ID!
  buyerAddress: Bytes!
  SimpleIndexToken: SimpleIndexToken!
  quantity: BigInt!
  transaction: Transaction!
  fee: Fee!
}

type SimpleIndexToken @entity {
  id: ID!
  address: Bytes!
  name: String!
  manager: Manager!
  issuances: [SimpleIndexTokenIssuance!]!
    @derivedFrom(field: "SimpleIndexToken")
  totalSupply: BigInt!
}

type SimpleIndexTokenRedeemed @entity {
  id: ID!
  SimpleIndexToken: Bytes! # address
  redeemer: Bytes! # address
  to: Bytes! # address
  transaction: Transaction!
  quantity: BigInt!
}
